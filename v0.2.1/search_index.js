var documenterSearchIndex = {"docs":
[{"location":"#CodecLz4-1","page":"Home","title":"CodecLz4","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Stable) (Image: Latest) (Image: Build Status) (Image: Build Status) (Image: CodeCov)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [CodecLz4]","category":"page"},{"location":"#CodecLz4.LZ4Compressor-Tuple{}","page":"Home","title":"CodecLz4.LZ4Compressor","text":"LZ4Compressor(; kwargs...)\n\nCreates an LZ4 compression codec.\n\nKeywords\n\nblocksizeid::BlockSizeID=default_size: max64KB, max256KB, max1MB, or max4MB or default_size\nblockmode::BlockMode=block_linked:  block_linked or block_independent\ncontentchecksum::Bool=false: if true, frame is terminated with a   32-bits checksum of decompressed data\nframetype::FrameType=normal_frame):  normal_frame or skippable_frame\ncontentsize::Integer=0: Size of uncompressed content (0 for unknown)\nblockchecksum::Bool=false: if true, each block is followed by a   checksum of block's compressed data\ncompressionlevel::Integer=0: compression level (-1..12)\nautoflush::Bool=false: always flush if true\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4CompressorStream-Tuple{IO}","page":"Home","title":"CodecLz4.LZ4CompressorStream","text":"LZ4CompressorStream(stream::IO; kwargs...)\n\nCreates an LZ4 compression stream. See LZ4Compressor() and TranscodingStream() for arguments.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4Decompressor-Tuple{}","page":"Home","title":"CodecLz4.LZ4Decompressor","text":"LZ4Compressor()\n\nCreates an LZ4 decompression codec.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4DecompressorStream-Tuple{IO}","page":"Home","title":"CodecLz4.LZ4DecompressorStream","text":"LZ4CompressorStream(stream::IO; kwargs...)\n\nCreates an LZ4 decompression stream. See TranscodingStream() for arguments.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_compressBegin-Tuple{Ptr{CodecLz4.LZ4F_cctx},Any,UInt64,Ref{CodecLz4.LZ4F_preferences_t}}","page":"Home","title":"CodecLz4.LZ4F_compressBegin","text":"Will write the frame header into dstBuffer.\n\ndstCapacity must be >= LZ4F_HEADER_SIZE_MAX bytes. prefsPtr is optional : you can provide C_NULL as argument, all preferences will then be set to default. Returns the number of bytes written into dstBuffer for the header or throws an error.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_compressBound-Tuple{UInt64,Ref{CodecLz4.LZ4F_preferences_t}}","page":"Home","title":"CodecLz4.LZ4F_compressBound","text":"Provides minimum dstCapacity for a given srcSize to guarantee operation success in worst case situations.\n\nprefsPtr is optional : when C_NULL is provided, preferences will be set to cover worst case scenario. Result is always the same for a srcSize and prefsPtr, so it can be trusted to size reusable buffers. When srcSize==0, LZ4F_compressBound() provides an upper bound for LZ4F_flush() and LZ4F_compressEnd() operations.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_compressEnd-Tuple{Ptr{CodecLz4.LZ4F_cctx},Any,UInt64,Any}","page":"Home","title":"CodecLz4.LZ4F_compressEnd","text":"Invoke to properly finish an LZ4 frame.\n\nIt will flush whatever data remained within cctx (like LZ4_flush()) and properly finalize the frame, with an endMark and a checksum. cOptPtr is optional : C_NULL can be provided, in which case all options will be set to default. Returns the number of bytes written into dstBuffer (necessarily >= 4 (endMark), or 8 if optional frame checksum is enabled) or throws an error if it fails (which can be tested using LZ4F_isError()) A successful call to LZ4F_compressEnd() makes cctx available again for another compression task.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_compressUpdate-Tuple{Ptr{CodecLz4.LZ4F_cctx},Any,UInt64,Any,UInt64,Any}","page":"Home","title":"CodecLz4.LZ4F_compressUpdate","text":"Can be called repetitively to compress as much data as necessary.\n\nAn important rule is that dstCapacity MUST be large enough to ensure operation success even in worst case situations. This value is provided by LZ4F_compressBound(). If this condition is not respected, LZ4F_compress() will fail. LZ4FcompressUpdate() doesn't guarantee error recovery. When an error occurs, compression context must be freed or resized. cOptPtr is optional : `CNULLcan be provided, in which case all options are set to default. Returns the number of bytes written intodstBuffer` (it can be zero, meaning input data was just buffered). or throws an error if it fails.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_createCompressionContext-Tuple{Ref{Ptr{CodecLz4.LZ4F_cctx}},UInt32}","page":"Home","title":"CodecLz4.LZ4F_createCompressionContext","text":"The first thing to do is to create a compressionContext object, which will be used in all compression operations. This is achieved using LZ4F_createCompressionContext(), which takes as argument a version. The version provided MUST be the current version. It is intended to track potential version mismatch, notably when using DLL. The function will provide a pointer to a fully allocated LZ4F_cctx object. Will throw an error if there was an error during context creation.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_createDecompressionContext-Tuple{Ref{Ptr{CodecLz4.LZ4F_dctx}},UInt32}","page":"Home","title":"CodecLz4.LZ4F_createDecompressionContext","text":"Create an LZ4F_dctx object, to track all decompression operations.\n\nThe version provided MUST be the current LZ4F version. The function provides a pointer to an allocated and initialized LZ4F_dctx object. The the function throws an error if the LZ4F_dctx object cannot be initialized. The dctx memory can be released using LZ4F_freeDecompressionContext().\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_decompress-Tuple{Ptr{CodecLz4.LZ4F_dctx},Any,Ref{UInt64},Any,Ref{UInt64},Any}","page":"Home","title":"CodecLz4.LZ4F_decompress","text":"Call this function repetitively to regenerate compressed data from srcBuffer.\n\nThe function will read up to srcSizePtr bytes from srcBuffer, and decompress data into dstBuffer, of capacity dstSizePtr. The number of bytes consumed from srcBuffer will be written into srcSizePtr (necessarily <= original value). The number of bytes decompressed into dstBuffer will be written into dstSizePtr (necessarily <= original value). The function does not necessarily read all input bytes, so always check value in srcSizePtr. Unconsumed source data must be presented again in subsequent invocations.\n\ndstBuffer can freely change between each consecutive function invocation. dstBuffer content will be overwritten.\n\nReturns an hint of how many srcSize bytes LZ4F_decompress() expects for next call. Schematically, it's the size of the current (or remaining) compressed block + header of next block. Respecting the hint provides some small speed benefit, because it skips intermediate buffers. This is just a hint though, it's always possible to provide any srcSize.\n\nWhen a frame is fully decoded, returns 0 (no more data expected). When provided with more bytes than necessary to decode a frame, LZ4F_decompress() will stop reading exactly at end of current frame, and return 0.\n\nIf decompression failed, an error is thrown. After a decompression error, the dctx context is not resumable. Use LZ4F_resetDecompressionContext() to return to clean state. After a frame is fully decoded, dctx can be used again to decompress another frame.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_flush-Tuple{Ptr{CodecLz4.LZ4F_cctx},Any,UInt64,Any}","page":"Home","title":"CodecLz4.LZ4F_flush","text":"When data must be generated and sent immediately, without waiting for a block to be completely filled, it's possible to call LZ4_flush(). It will immediately compress any data buffered within cctx. dstCapacity must be large enough to ensure the operation will be successful. cOptPtr is optional : it's possible to provide C_NULL, all options will be set to default. Returns the number of bytes written into dstBuffer (it can be zero, which means there was no data stored within cctx) or throws an error if it fails.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_freeCompressionContext-Tuple{Ptr{CodecLz4.LZ4F_cctx}}","page":"Home","title":"CodecLz4.LZ4F_freeCompressionContext","text":"Releases the memory of a LZ4F_cctx.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_freeDecompressionContext-Tuple{Ptr{CodecLz4.LZ4F_dctx}}","page":"Home","title":"CodecLz4.LZ4F_freeDecompressionContext","text":"Frees the decompressionContext.\n\nThe result of LZ4F_freeDecompressionContext() is indicative of the current state of decompressionContext when being released. That is, it should be == 0 if decompression has been completed fully and correctly.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_getFrameInfo-Tuple{Ptr{CodecLz4.LZ4F_dctx},Ref{CodecLz4.LZ4F_frameInfo_t},Any,Any}","page":"Home","title":"CodecLz4.LZ4F_getFrameInfo","text":"Extracts frame parameters (max blockSize, dictID, etc.).\n\nIts usage is optional. Extracted information is typically useful for allocation and dictionary. This function works in 2 situations :\n\nAt the beginning of a new frame, in which case it will decode information from srcBuffer, starting the decoding process. Input size must be large enough to successfully decode the entire frame header. Frame header size is variable, but is guaranteed to be <= LZ4F_HEADER_SIZE_MAX bytes. It's allowed to provide more input data than this minimum.\nAfter decoding has been started. In which case, no input is read, frame parameters are extracted from dctx.\nIf decoding has barely started, but not yet extracted information from header, LZ4F_getFrameInfo() will fail.\n\nThe number of bytes consumed from srcBuffer will be updated within srcSizePtr (necessarily <= original value). Decompression must resume from (srcBuffer + srcSizePtr). Returns an hint about how many srcSize bytes LZ4F_decompress() expects for next call or throws an error.\n\nNote 1 : In case of error, dctx is not modified. Decoding operation can resume from beginning safely. Note 2 : Frame parameters are copied into an already allocated LZ4F_frameInfo_t structure.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_getVersion-Tuple{}","page":"Home","title":"CodecLz4.LZ4F_getVersion","text":"Gets the current LZ4F version.\n\n\n\n\n\n","category":"method"},{"location":"#CodecLz4.LZ4F_resetDecompressionContext-Tuple{Ptr{CodecLz4.LZ4F_dctx}}","page":"Home","title":"CodecLz4.LZ4F_resetDecompressionContext","text":"Re-initializes decompression context\n\nIn case of an error, the context is left in \"undefined\" state. In which case, it's necessary to reset it, before re-using it. This method can also be used to abruptly stop any unfinished decompression, and start a new one using same context resources.\n\n\n\n\n\n","category":"method"},{"location":"#TranscodingStreams.expectedsize-Tuple{LZ4Compressor,TranscodingStreams.Memory}","page":"Home","title":"TranscodingStreams.expectedsize","text":"TranscodingStreams.expectedsize(codec::LZ4Compressor, input::Memory)\n\nReturns the expected size of the transcoded data.\n\n\n\n\n\n","category":"method"},{"location":"#TranscodingStreams.finalize-Tuple{LZ4Compressor}","page":"Home","title":"TranscodingStreams.finalize","text":"TranscodingStreams.finalize(codec::LZ4Compressor)\n\nFinalizes the LZ4F Compression Codec.\n\n\n\n\n\n","category":"method"},{"location":"#TranscodingStreams.finalize-Tuple{LZ4Decompressor}","page":"Home","title":"TranscodingStreams.finalize","text":"TranscodingStreams.finalize(codec::LZ4Decompressor)\n\nFinalizes the LZ4F Decompression Codec.\n\n\n\n\n\n","category":"method"},{"location":"#TranscodingStreams.initialize-Tuple{LZ4Compressor}","page":"Home","title":"TranscodingStreams.initialize","text":"TranscodingStreams.initialize(codec::LZ4Compressor) \n\nInitializes the LZ4F Compression Codec.\n\n\n\n\n\n","category":"method"},{"location":"#TranscodingStreams.initialize-Tuple{LZ4Decompressor}","page":"Home","title":"TranscodingStreams.initialize","text":"TranscodingStreams.initialize(codec::LZ4Decompressor)\n\nInitializes the LZ4F Decompression Codec.\n\n\n\n\n\n","category":"method"},{"location":"#TranscodingStreams.minoutsize-Tuple{LZ4Compressor,TranscodingStreams.Memory}","page":"Home","title":"TranscodingStreams.minoutsize","text":"TranscodingStreams.minoutsize(codec::LZ4Compressor, input::Memory) \n\nReturns the minimum output size of process.\n\n\n\n\n\n","category":"method"},{"location":"#TranscodingStreams.process-Tuple{LZ4Compressor,TranscodingStreams.Memory,TranscodingStreams.Memory,TranscodingStreams.Error}","page":"Home","title":"TranscodingStreams.process","text":"TranscodingStreams.process(codec::LZ4Compressor, input::Memory, output::Memory, error::Error)\n\nCompresses the data from input and writes to output. The LZ4 compression algorithm may simply buffer the input data a full frame can be produced, so data_written may be 0. flush() may be used to force output to be written.\n\n\n\n\n\n","category":"method"},{"location":"#TranscodingStreams.process-Tuple{LZ4Decompressor,TranscodingStreams.Memory,TranscodingStreams.Memory,TranscodingStreams.Error}","page":"Home","title":"TranscodingStreams.process","text":"TranscodingStreams.process(codec::LZ4Decompressor, input::Memory, output::Memory, error::Error)\n\nDecompresses the data from input and writes to output. If the input data is not properly formatted this function will throw an error.\n\n\n\n\n\n","category":"method"},{"location":"#TranscodingStreams.startproc-Tuple{LZ4Compressor,Symbol,TranscodingStreams.Error}","page":"Home","title":"TranscodingStreams.startproc","text":"TranscodingStreams.startproc(codec::LZ4Compressor, mode::Symbol, error::Error)\n\nStarts processing with the codec Creates the LZ4F header to be written to the output.\n\n\n\n\n\n","category":"method"}]
}
